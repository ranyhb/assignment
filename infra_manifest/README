helm install mymongo oci://registry-1.docker.io/bitnamicharts/mongodb --set auth.rootPassword=root123 --set auth.rootUser=root --set auth.enabled=false

helm install mymongo bitnami/mongodb --set auth.rootPassword=root123 --set auth.username=myusername --set auth.password=mypassword --set auth.rootUser=root

** Please be patient while the chart is being deployed **

MongoDB&reg; can be accessed on the following DNS name(s) and ports from within your cluster:

    mymongo-mongodb.default.svc.cluster.local

To get the root password run:

    export MONGODB_ROOT_PASSWORD=$(kubectl get secret --namespace default mymongo-mongodb -o jsonpath="{.data.mongodb-root-password}" | base64 -d)

To get the password for "myusername" run:

    export MONGODB_PASSWORD=$(kubectl get secret --namespace default mymongo-mongodb -o jsonpath="{.data.mongodb-passwords}" | base64 -d | awk -F',' '{print $1}')

To connect to your database, create a MongoDB&reg; client container:

    kubectl run --namespace default mymongo-mongodb-client --rm --tty -i --restart='Never' --env="MONGODB_ROOT_PASSWORD=$MONGODB_ROOT_PASSWORD" --image docker.io/bitnami/mongodb:7.0.12-debian-12-r4 --command -- bash

Then, run the following command:
    mongosh admin --host "mymongo-mongodb" --authenticationDatabase admin -u $MONGODB_ROOT_USER -p $MONGODB_ROOT_PASSWORD

To connect to your database from outside the cluster execute the following commands:

    kubectl port-forward --namespace default svc/mymongo-mongodb 27017:27017 &
    mongosh --host 127.0.0.1 --authenticationDatabase admin -p $MONGODB_ROOT_PASSWORD

WARNING: There are "resources" sections in the chart not set. Using "resourcesPreset" is not recommended for production. For production installations, please set the following values according to your workload needs:
  - arbiter.resources
  - resources
+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

kubectl exec -it my-pod -- bash


kubectl port-forward mongo-pod 27017:27017
-----------------------------

helm install mykafka oci://registry-1.docker.io/bitnamicharts/kafka
# Read more about the installation in the 
Bitnami package for Apache Kafka Chart Github repository


** Please be patient while the chart is being deployed **

Kafka can be accessed by consumers via port 9092 on the following DNS name from within your cluster:

    mykafka.default.svc.cluster.local

Each Kafka broker can be accessed by producers via port 9092 on the following DNS name(s) from within your cluster:

    mykafka-controller-0.mykafka-controller-headless.default.svc.cluster.local:9092
    mykafka-controller-1.mykafka-controller-headless.default.svc.cluster.local:9092
    mykafka-controller-2.mykafka-controller-headless.default.svc.cluster.local:9092

The CLIENT listener for Kafka client connections from within your cluster have been configured with the following security settings:
    - SASL authentication

To connect a client to your Kafka, you need to create the 'client.properties' configuration files with the content below:

security.protocol=SASL_PLAINTEXT
sasl.mechanism=SCRAM-SHA-256
sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \
    username="user1" \
    password="$(kubectl get secret mykafka-user-passwords --namespace default -o jsonpath='{.data.client-passwords}' | base64 -d | cut -d , -f 1)";

To create a pod that you can use as a Kafka client run the following commands:

    kubectl run mykafka-client --restart='Never' --image docker.io/bitnami/kafka:3.8.0-debian-12-r0 --namespace default --command -- sleep infinity
    kubectl cp --namespace default /path/to/client.properties mykafka-client:/tmp/client.properties
    kubectl exec --tty -i mykafka-client --namespace default -- bash

    PRODUCER:
        kafka-console-producer.sh \
            --producer.config /tmp/client.properties \
            --broker-list mykafka-controller-0.mykafka-controller-headless.default.svc.cluster.local:9092,mykafka-controller-1.mykafka-controller-headless.default.svc.cluster.local:9092,mykafka-controller-2.mykafka-controller-headless.default.svc.cluster.local:9092 \
            --topic test

    CONSUMER:
        kafka-console-consumer.sh \
            --consumer.config /tmp/client.properties \
            --bootstrap-server mykafka.default.svc.cluster.local:9092 \
            --topic test \
            --from-beginning

WARNING: There are "resources" sections in the chart not set. Using "resourcesPreset" is not recommended for production. For production installations, please set the following values according to your workload needs:
  - controller.resources
+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

user:user1
pass: JD4rI9DKm2
--------------------------------


curl.exe -X POST http://localhost:5000/buy -H "Content-Type: application/json" -d '{"\username": "\user1", "\userid": 123, "price": 29.99}'

kubectl port-forward mymongo-mongodb-75dc8b6c87-4zlqs 27017:27017


curl.exe -X POST http://localhost:5000/buy -H "Content-Type: application/json" -d '{\"username\": \"user1\", \"userid\": 123, \"price\": 29.99}'

curl.exe -X GET http://localhost:5000/getAllUserBuys?username=user1&userid=123

kubectl exec -it my-pod -- bash