helm install mymongo oci://registry-1.docker.io/bitnamicharts/mongodb --set auth.rootPassword=root123 --set auth.rootUser=root --set auth.enabled=false

helm install mymongo bitnami/mongodb --set auth.rootPassword=root123 --set auth.username=myusername --set auth.password=mypassword --set auth.rootUser=root

** Please be patient while the chart is being deployed **

MongoDB&reg; can be accessed on the following DNS name(s) and ports from within your cluster:

    mymongo-mongodb.default.svc.cluster.local

To get the root password run:

    export MONGODB_ROOT_PASSWORD=$(kubectl get secret --namespace default mymongo-mongodb -o jsonpath="{.data.mongodb-root-password}" | base64 -d)

To get the password for "myusername" run:

    export MONGODB_PASSWORD=$(kubectl get secret --namespace default mymongo-mongodb -o jsonpath="{.data.mongodb-passwords}" | base64 -d | awk -F',' '{print $1}')

To connect to your database, create a MongoDB&reg; client container:

    kubectl run --namespace default mymongo-mongodb-client --rm --tty -i --restart='Never' --env="MONGODB_ROOT_PASSWORD=$MONGODB_ROOT_PASSWORD" --image docker.io/bitnami/mongodb:7.0.12-debian-12-r4 --command -- bash

Then, run the following command:
    mongosh admin --host "mymongo-mongodb" --authenticationDatabase admin -u $MONGODB_ROOT_USER -p $MONGODB_ROOT_PASSWORD

To connect to your database from outside the cluster execute the following commands:

    kubectl port-forward --namespace default svc/mymongo-mongodb 27017:27017 &
    mongosh --host 127.0.0.1 --authenticationDatabase admin -p $MONGODB_ROOT_PASSWORD

WARNING: There are "resources" sections in the chart not set. Using "resourcesPreset" is not recommended for production. For production installations, please set the following values according to your workload needs:
  - arbiter.resources
  - resources
+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

kubectl exec -it my-pod -- bash


kubectl port-forward mongo-pod 27017:27017
------------------------------------------------------

helm upgrade mykafka oci://registry-1.docker.io/bitnamicharts/kafka --set externalAccess.enabled=true --set "externalAccess.autoDiscovery.enabled=true --set rbac.create=true --set controller.automountServiceAccountToken=true -set broker.automountServiceAccountToken=true 
# Read more about the installation in the 
Release "mykafka" has been upgraded. Happy Helming!
NAME: mykafka
LAST DEPLOYED: Fri Aug  9 11:36:38 2024
NAMESPACE: default
STATUS: deployed
REVISION: 3
TEST SUITE: None
NOTES:
CHART NAME: kafka
CHART VERSION: 30.0.3
APP VERSION: 3.8.0
---------------------------------------------------------------------------------------------
 WARNING

    By specifying "serviceType=LoadBalancer" and not configuring the authentication
    you have most likely exposed the Kafka service externally without any
    authentication mechanism.

    For security reasons, we strongly suggest that you switch to "ClusterIP" or
    "NodePort". As alternative, you can also configure the Kafka authentication.

---------------------------------------------------------------------------------------------

** Please be patient while the chart is being deployed **

Kafka can be accessed by consumers via port 9092 on the following DNS name from within your cluster:

    mykafka.default.svc.cluster.local

Each Kafka broker can be accessed by producers via port 9092 on the following DNS name(s) from within your cluster:

    mykafka-controller-0.mykafka-controller-headless.default.svc.cluster.local:9092
    mykafka-controller-1.mykafka-controller-headless.default.svc.cluster.local:9092
    mykafka-controller-2.mykafka-controller-headless.default.svc.cluster.local:9092

To create a pod that you can use as a Kafka client run the following commands:

    kubectl run mykafka-client --restart='Never' --image docker.io/bitnami/kafka:3.8.0-debian-12-r2 --namespace default --command -- sleep infinity
    kubectl exec --tty -i mykafka-client --namespace default -- bash

    PRODUCER:
        kafka-console-producer.sh \
            --broker-list mykafka-controller-0.mykafka-controller-headless.default.svc.cluster.local:9092,mykafka-controller-1.mykafka-controller-headless.default.svc.cluster.local:9092,mykafka-controller-2.mykafka-controller-headless.default.svc.cluster.local:9092 \
            --topic test

    CONSUMER:
        kafka-console-consumer.sh \
            --bootstrap-server mykafka.default.svc.cluster.local:9092 \
            --topic test \
            --from-beginning
To connect to your Kafka controller+broker nodes from outside the cluster, follow these instructions:
    NOTE: It may take a few minutes for the LoadBalancer IPs to be available.

        Watch the status with: 'kubectl get svc --namespace default -l "app.kubernetes.io/name=kafka,app.kubernetes.io/instance=mykafka,app.kubernetes.io/component=kafka,pod" -w'

    Kafka Brokers domain: You will have a different external IP for each Kafka broker. You can get the list of external IPs using the command below:

        echo "$(kubectl get svc --namespace default -l "app.kubernetes.io/name=kafka,app.kubernetes.io/instance=mykafka,app.kubernetes.io/component=kafka,pod" -o jsonpath='{.items[*].status.loadBalancer.ingress[0].ip}' | tr ' ' '\n')"

    Kafka Brokers port: 9094

WARNING: There are "resources" sections in the chart not set. Using "resourcesPreset" is not recommended for production. For production installations, please set the 
following values according to your workload needs:
  - controller.resources
  - externalAccess.autoDiscovery.resources
+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

--------------------------------


curl.exe -X POST http://localhost:5000/buy -H "Content-Type: application/json" -d '{"\username": "\user1", "\userid": 123, "price": 29.99}'

kubectl port-forward mymongo-mongodb-75dc8b6c87-4zlqs 27017:27017


curl.exe -X POST http://localhost:5000/buy -H "Content-Type: application/json" -d '{\"username\": \"user1\", \"userid\": 123, \"price\": 29.99}'

curl.exe -X GET http://localhost:5000/getAllUserBuys?username=user1&userid=123

kubectl exec -it my-pod -- bash